/api/metadata:
  post:
    tags:
      - metadata-controller
    summary: 'Create or Update '
    description: 'With this end-point we can create or update  Metadata '
    operationId: createOrUpdate
    requestBody:
      description: 'Metadata Object needs to be added   '
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Metadata'
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  delete:
    tags:
      - metadata-controller
    summary: Delete all metadata
    description: Delete all existing metadata
    operationId: deleteAll
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
/api/metadata/bulk:
  post:
    tags:
      - metadata-controller
    summary: Bulk create or update metadata
    description: Create or update the given metadata
    operationId: createOrUpdateMany
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MetadataBulkUpdate"
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataBulkUpdateResponse'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  delete:
    tags:
      - metadata-controller
    summary: Bulk delete metadata
    description: Delete existing metadata
    operationId: deleteMany
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MetadataBulkDelete"
      required: true
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
/api/metadata/mainentityofpage/{id}:
  delete:
    tags:
      - metadata-controller
    summary: Delete metadata by mainEntityOfPage.id
    description: Delete the mainEntityOfPage-entry in the metadata identified by the given id. If mainEntityOfPage is empty afterwards, also delete the metadata itself.
    operationId: deleteMainEntityOfPage
    parameters:
      - name: id
        in: path
        description: base64 encoded ID of the metadata.mainEntityOfPage that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
      "404":
        description: Not Found
        content: {}
/api/metadata/{id}:
  get:
    tags:
      - metadata-controller
    summary: Find Metadata by Id
    description: With this end-point we can  get by Id  an existing  Metadata
    operationId: findById
    parameters:
      - name: id
        in: path
        description: id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  put:
    tags:
      - metadata-controller
    summary: Update an existing Metadata
    description: 'With this end-point we can  update an existing  Metadata '
    operationId: update
    parameters:
      - name: id
        in: path
        description: Id to update Metadata
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    requestBody:
      description: 'Metadata Object needs to be added '
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Metadata'
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  delete:
    tags:
      - metadata-controller
    summary: Delete metadata by ID
    description: For valid response try integer IDs with positive integer value.         Negative
      or non-integer values will generate API errors
    operationId: delete
    parameters:
      - name: id
        in: path
        description: ID of the metadata that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
components:
  schemas:
    LabelledConcept:
      required:
        - id
      type: object
      properties:
        id:
          type: string
        prefLabel:
          $ref: 'api.yaml#/components/schemas/LocalizedString'
    Affiliation:
      required:
        - name
        - type
      type: object
      title: Affiliation
      description: The organization a creator or contributor was affiliated with in the context of the creation of the resource
      properties:
        id:
          type: string
          description: The URI of the organization
          format: uri
          example: https://www.wikidata.org/entity/Q54166
        type:
          type: string
          description: Type of the organization
          example: Organization
        name:
          type: string
          description: The name of the organization
          example: Technische Hochschule Köln
    Caption:
      required:
        - id
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - MediaObject
          example: MediaObject
        id:
          type: string
          format: uri
          example: "https://example.org/subs-de.vtt"
        encodingFormat:
          type: string
          title: Encoding Format
          description: The media type of the media object, conforming to https://www.iana.org/assignments/media-types/media-types.xml
          example: text/vtt
        inLanguage:
          $ref: 'Language.yaml#/components/schemas/Language'
          example: de
    ConditionsOfAccess:
      required:
        - id
      type: object
      title: conditionsOfAccess
      description: Description if login is needed to use the source.
      properties:
        type:
          type: string
          example: Concept
        id:
          type: string
          format: uri
          example: "https://w3id.org/kim/conditionsOfAccess/no_login"
        prefLabel:
          $ref: 'api.yaml#/components/schemas/LocalizedString'
          example:
            'de': 'keine Anmeldung erforderlich'
            'en': 'no login required'
    License:
      required:
        - id
      type: object
      title: License
      properties:
        id:
          type: string
          description: URL of the License.
          format: uri
          example: https://creativecommons.org/licenses/by/4.0/
    Metadata:
      required:
        - id
        - name
      type: object
      properties:
        "@context":
          title: JSON-LD Context
          minItems: 2
          type: array
          description: The JSON-LD context for the structured resource descriptions
          example:
            - https://w3id.org/kim/lrmi-profile/draft/context.jsonld
            - '@language': de
          items:
            type: object
        id:
          title: URL
          type: string
          description: The URI of the resource
          format: uri
          example: https://axel-klinger.gitlab.io/gitlab-for-documents/index.html
        name:
          title: Title
          type: string
          description: Title of the educational resource
          example: GitLab für Texte
        caption:
          title: Caption
          description: The caption/subtitle file for an audio/video resource
          type: array
          items:
            $ref: '#/components/schemas/Caption'
        creator:
          title: Creator
          type: array
          description: Creator
          items:
            $ref: '#/components/schemas/MetadataCreator'
        contributor:
          title: Contributor
          type: array
          description: Contributor
          items:
            $ref: '#/components/schemas/MetadataContributor'
        conditionsOfAccess:
          $ref: '#/components/schemas/ConditionsOfAccess'
        description:
          title: Description
          type: string
          description: A short description of the resource
          example: an example description
        duration:
          title: Duration
          type: string
          description: "The duration of an audio/video resource (the time it takes to play the audio/video resource) in ISO 8601 duration format: P[n]Y[n]M[n]DT[n]H[n]M[n]S"
          pattern: '^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$'
          example: PT47M58S
        isAccessibleForFree:
          title: Status of free accessibility
          description: States if a ressource is free to access and to use. This also can be a ressource without an open license
          type: boolean
        about:
          title: Subject
          type: array
          description: Classification of the educational resource
          example:
            - id: "https://w3id.org/kim/hochschulfaechersystematik/n105"
              prefLabel:
                'de': 'Mathematik'
                'en': 'Mathematics'
          items:
            $ref: '#/components/schemas/LabelledConcept'
        license:
          $ref: '#/components/schemas/License'
        image:
          title: Image
          type: string
          description: A link to an image of the resource
          format: uri
          example: https://www.oernds.de/edu-sharing/preview?nodeId=84400a83-9d1a-4738-a19f-00fc332df247&storeProtocol=workspace&storeId=SpacesStore&dontcache=1589890988103
        dateCreated:
          title: Creation Date
          type: string
          description: "date on which the educational resource was created. format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ"
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])([tT]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.\d+)?([zZ]|([\+-])([01][0-9]|2[0-3]):([0-5][0-9])))?$'
          example: "2020-02-22"
        datePublished:
          title: Publication Date
          type: string
          description: "date on which the educational resource was published. format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ"
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])([tT]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.\d+)?([zZ]|([\+-])([01][0-9]|2[0-3]):([0-5][0-9])))?$'
          example: "2020-02-22"
        inLanguage:
          title: Language
          type: array
          description: Language code ISO 639-1
          example:
            - de
            - en
          items:
            $ref: 'Language.yaml#/components/schemas/Language'
        learningResourceType:
          title: Learning Resource Type
          type: array
          description: Learning Resource Type
          example:
            - id: "https://w3id.org/kim/hcrt/course"
              prefLabel:
                'de': 'Kurs'
                'en': 'Course'
          items:
            $ref: '#/components/schemas/LabelledConcept'
        audience:
          title: Audience
          type: array
          description: Audience / interactivity level
          example:
            - id: "http://purl.org/dcx/lrmi-vocabs/educationalAudienceRole/student"
              prefLabel:
                'de': 'Lernende'
                'en': 'student'
          items:
            $ref: '#/components/schemas/LabelledConcept'
        mainEntityOfPage:
          title: metadata description
          type: array
          description: "This object contains metametadata, i.e. information about\
            \ the description of the OER."
          items:
            $ref: '#/components/schemas/MetadataMainEntityOfPage'
        publisher:
          title: Publisher
          type: array
          description: The publisher of the educational resource.
          items:
            $ref: '#/components/schemas/MetadataPublisher'
        sourceOrganization:
          title: Source Organization
          type: array
          description: The Organization on whose behalf the creator was working.
          items:
            $ref: '#/components/schemas/MetadataSourceOrganization'
        type:
          title: Type
          type: array
          description: "The type (rdf:type / @type) of the learning resource, taken\
            \ from sub-classes of sdo:CreativeWork."
          example:
            - LearningResource
          items:
            type: string
            default: LearningResource
        keywords:
          title: Keywords
          type: array
          description: Keywords or tags used to describe this content
          example:
            - Multimedia
            - GitLab
          items:
            type: string
        encoding:
          title: Encoding
          type: array
          description: "A media object that encodes this learning resource"
          items:
            $ref: '#/components/schemas/MediaObject'
        trailer:
          description: "A trailer/video-teaser of this learning resource"
          $ref: '#/components/schemas/Trailer'
        assesses:
          type: array
          example:
            - id: "https://example.org/competencies/1"
              prefLabel:
                'en': 'Awesomeness'
          items:
            $ref: '#/components/schemas/LabelledConcept'
        competencyRequired:
          type: array
          example:
            - id: "https://example.org/competencies/2"
              prefLabel:
                'en': 'Humor'
          items:
            $ref: '#/components/schemas/LabelledConcept'
        educationalLevel:
          type: array
          titel: "Educational context"
          description: "The level in terms of progression through an educational context for which the learning resource is designated."
          example:
            - id: "https://w3id.org/kim/educationalLevel/level_A"
              prefLabel:
                'de': "Hochschule"
                'en': "University"
          items:
            $ref: '#/components/schemas/LabelledConcept'
        teaches:
          type: array
          example:
            - id: "https://example.org/competencies/3"
              prefLabel:
                'en': "Resilience"
          items:
            $ref: '#/components/schemas/LabelledConcept'
    MetadataCreator:
      required:
        - name
        - type
      type: object
      properties:
        type:
          title: Type
          type: string
          description: Type
          example: Person
          enum:
            - Person
            - Organization
        id:
          type: string
          description: "identifier of the person/organization like orcid, gnd or ror"
          format: uri
        name:
          title: Name
          type: string
          description: The creator's name
          example: Max Mustermann
        honorificPrefix:
          title: like academic title
          type: string
          example: Dr.
        affiliation:
          $ref: '#/components/schemas/Affiliation'
    MetadataContributor:
      required:
        - name
        - type
      type: object
      properties:
        type:
          title: Type
          type: string
          description: Type
          example: Person
        id:
          type: string
          description: "identifier of the person/organization like orcid, gnd or ror"
          format: uri
        name:
          title: Name
          type: string
          description: The contributor's name
          example: Maxi Mustermensch
        honorificPrefix:
          title: like academic title
          type: string
          example: Dr.
        affiliation:
          $ref: '#/components/schemas/Affiliation'
    MediaObject:
      type: object
      properties:
        bitrate:
          type: string
          description: "The bitrate of an audio or video object."
          example: "831 kb/s"
        contentUrl:
          type: string
          format: uri
          description: "The download URL of the media object"
          example: "https://some.content.org/download"
        contentSize:
          type: string
          description: "The size of the media object in (kilo/mega/giga) bytes."
          example: "286MB"
        embedUrl:
          type: string
          format: uri
          description: "A URL pointing to a player for a video. In general, this is the information in the src element of an embed tag."
          example: "https://some.content.org/embed"
        encodingFormat:
          type: string
          description: "The media type of the media object, conforming to https://www.iana.org/assignments/media-types/media-types.xml"
          example: "video/mp4"
        sha256:
          type: string
          description: "The SHA-2 SHA256 hash of the content of the media object."
          example: "af96aba0790476495cfb5fa6d5612b91d8e404bb0d53aaf4b19bb8bd49843959"
        type:
          type: string
          enum:
            - MediaObject
    Trailer:
      type: object
      properties:
        bitrate:
          type: string
          description: "The bitrate of an audio or video object."
          example: "831 kb/s"
        contentUrl:
          type: string
          format: uri
          description: "The download URL of the media object"
          example: "https://some.content.org/download"
        contentSize:
          type: string
          description: "The size of the media object in (kilo/mega/giga) bytes."
          example: "286MB"
        embedUrl:
          type: string
          format: uri
          description: "A URL pointing to a player for a video. In general, this is the information in the src element of an embed tag."
          example: "https://some.content.org/embed"
        encodingFormat:
          type: string
          description: "The media type of the media object, conforming to https://www.iana.org/assignments/media-types/media-types.xml"
          example: "video/mp4"
        sha256:
          type: string
          description: "The SHA-2 SHA256 hash of the content of the media object."
          example: "af96aba0790476495cfb5fa6d5612b91d8e404bb0d53aaf4b19bb8bd49843959"
        type:
          type: string
          enum:
            - VideoObject
    Provider:
      title: Provider
      type: object
      properties:
        id:
          type: string
          description: The URI for the metadata provider
          format: uri
          example: https://oerworldmap.org/resource/urn:uuid:4062c64d-b0ac-4941-95c2-8116f137326d
        type:
          type: string
          description: Type of the metadata provider
          example: Service
        name:
          type: string
          description: The name of the metadata provider
          example: ZOERR
      description: Site or service that is source of the metadata
    MetadataMainEntityOfPage:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The URI of the metadata
          format: uri
          example: https://www.oernds.de/edu-sharing/components/render/84400a83-9d1a-4738-a19f-00fc332df247
        type:
          type: string
          description: Type of the metadata description
          example: WebPage
        dateCreated:
          title: Creation date of the metadata
          type: string
          description: "Creation date of the metadata. format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ"
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])([tT]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.\d+)?([zZ]|([\+-])([01][0-9]|2[0-3]):([0-5][0-9])))?$'
          example: "2020-03-21"
        dateModified:
          title: Date of last modification of the metadata
          type: string
          description: "Date of last modification of the metadata. format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ"
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])([tT]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.\d+)?([zZ]|([\+-])([01][0-9]|2[0-3]):([0-5][0-9])))?$'
          example: "2020-03-22"
        provider:
          $ref: '#/components/schemas/Provider'
    MetadataPublisher:
      required:
        - name
        - type
      type: object
      properties:
        id:
          type: string
          description: The URI for the organization
          format: uri
          example: https://www.wikidata.org/entity/Q54166
        type:
          type: string
          description: Type of the organization
          example: Organization
        name:
          type: string
          description: The name of the organization
          example: Technische Hochschule Köln
    MetadataSourceOrganization:
      type: object
      properties:
        id:
          type: string
          description: The URI for the source organization
          format: uri
          example: https://www.wikidata.org/entity/Q54166
        type:
          type: string
          description: Type of the source organization
          example: Organization
        name:
          type: string
          description: The name of the source organization
          example: Technische Hochschule Köln
    MetadataBulkDelete:
      type: object
      properties:
        providerName:
          type: string
          description: name of the provider whose metadata should be deleted
          example: twillo
    MetadataBulkUpdate:
      type: array
      description: Create or update many Metadata.
      items:
        $ref: '#/components/schemas/Metadata'
    MetadataBulkUpdateResponse:
      required:
        - success
        - failed
      type: object
      description: Result of a bulk update.
      properties:
        success:
          type: integer
          description: number of successfully imported records
          example: 500
        failed:
          type: integer
          description: number of import failures
          example: 1
        messages:
          type: array
          description: description of failures
          items:
            type: object
            properties:
              recordId:
                type: string
                description: The URI of the record the message is about
                format: uri
                example: https://axel-klinger.gitlab.io/gitlab-for-documents/index.html
              messages:
                type: array
                description: description of the failures
                items:
                  type: string
