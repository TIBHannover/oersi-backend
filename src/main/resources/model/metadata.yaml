/api/metadata:
  post:
    tags:
      - metadata-controller
    summary: 'Create or Update '
    description: 'Create or update the given metadata.'
    operationId: createOrUpdate
    requestBody:
      description: 'Metadata object'
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  delete:
    tags:
      - metadata-controller
    summary: Delete all metadata
    description: Delete all existing metadata
    operationId: deleteAll
    parameters:
      - name: update-public
        in: query
        description: also update public indices
        schema:
          type: boolean
          default: false
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
/api/metadata/bulk:
  post:
    tags:
      - metadata-controller
    summary: Bulk create or update metadata
    description: Create or update the given metadata
    operationId: createOrUpdateMany
    requestBody:
      content:
        application/json:
          schema:
            type: array
            description: Create or update many Metadata.
            items:
              type: object
              additionalProperties:
                type: object
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataBulkUpdateResponse'
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
/api/metadata/source:
  delete:
    tags:
      - metadata-controller
    summary: Bulk delete source information in metadata
    description: Delete the source-information-entry (or -entries) in the metadata identified by the given parameters. If list of all source-information is empty afterwards, also delete the metadata itself.
    operationId: deleteManySourceInformation
    parameters:
      - name: update-public
        in: query
        description: also update public indices
        schema:
          type: boolean
          default: true
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MetadataSourceBulkDelete"
      required: true
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
/api/metadata/source/{id}:
  delete:
    tags:
      - metadata-controller
    summary: Delete metadata by source identifier
    description: Delete the source-information-entry in the metadata identified by the given id. If list of all source-information is empty afterwards, also delete the metadata itself.
    operationId: deleteSourceInformation
    parameters:
      - name: id
        in: path
        description: base64 encoded ID of the source-information that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: update-public
        in: query
        description: also update public indices
        schema:
          type: boolean
          default: true
    responses:
      "200":
        description: OK
        content: {}
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
      "404":
        description: Not Found
        content: {}
/api/metadata/{id}:
  get:
    tags:
      - metadata-controller
    summary: Find Metadata by Id
    description: retrieve an existing Metadata by ID
    operationId: findById
    parameters:
      - name: id
        in: path
        description: base64 encoded ID of the metadata
        required: true
        style: simple
        explode: false
        schema:
          type: string
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  put:
    tags:
      - metadata-controller
    summary: Update an existing Metadata
    description: 'With this end-point we can  update an existing  Metadata '
    operationId: update
    parameters:
      - name: id
        in: path
        description: base64 encoded ID of the metadata
        required: true
        style: simple
        explode: false
        schema:
          type: string
    requestBody:
      description: 'Metadata Object needs to be added '
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
      required: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
  delete:
    tags:
      - metadata-controller
    summary: Delete metadata by ID
    description: delete the metadata that is identified by the given ID
    operationId: delete
    parameters:
      - name: id
        in: path
        description: base64 encoded ID of the metadata that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: update-public
        in: query
        description: also update public indices
        schema:
          type: boolean
          default: true
    responses:
      "200":
        description: OK
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
      "400":
        description: Bad Request
        content: {}
      "401":
        description: Unauthorized
        content: {}
      "403":
        description: Forbidden
        content: {}
components:
  schemas:
    MetadataSourceBulkDelete:
      type: object
      properties:
        queryName:
          type: string
          description: name of the query (as defined in search_index.properties)
          example: providerName
        queryParam:
          type: string
          description: param for the search query that identifies the metadataSource that should be deleted
          example: twillo
    MetadataBulkUpdateResponse:
      required:
        - success
        - failed
      type: object
      description: Result of a bulk update.
      properties:
        success:
          type: integer
          description: number of successfully imported records
          example: 500
        failed:
          type: integer
          description: number of import failures
          example: 1
        messages:
          type: array
          description: description of failures
          items:
            type: object
            properties:
              recordId:
                type: string
                description: The URI of the record the message is about
                format: uri
                example: https://axel-klinger.gitlab.io/gitlab-for-documents/index.html
              messages:
                type: array
                description: description of the failures
                items:
                  type: string
